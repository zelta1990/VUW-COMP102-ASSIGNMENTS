#BlueJ class context
comment0.params=
comment0.target=void\ printAll()
comment0.text=\ Core\ 1\n\ Reads\ the\ class\ timetable\ file,\ printing\ out\ each\ line\ to\ the\ UI.\n\ This\ method\ is\ very\ straightforward,\ and\ there\ are\ very\ similar\n\ examples\ in\ the\ lecture\ notes.\n
comment1.params=targetCourse
comment1.target=void\ printCourse(java.lang.String)
comment1.text=\ Core\ 2\n\ Reads\ the\ class\ timetable\ file,\ printing\ out\ (to\ the\ UI\ window)\n\ the\ class\ type,\ day,\ start\ time,\ end\ time,\ and\ room\n\ for\ each\ class\ with\ the\ target\ course.\n\ Prints\ a\ message\ if\ there\ are\ no\ classes\ for\ the\ course.\n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment2.params=startTime
comment2.target=void\ printAtStartTime(int)
comment2.text=\ Core\ 3\n\ Prints\ out\ the\ start\ time\ and\ underlines\ it,\ then\n\ Reads\ the\ class\ timetable\ file,\ printing\ out\ (to\ the\ UI\ window)\n\ the\ course\ code,\ room,\ type,\ day\ and\ end\ time\ for\n\ each\ class\ that\ starts\ at\ the\ target\ time.\n\ It\ will\ be\ best\ to\ read\ the\ six\ tokens\ on\ each\ line\ individually.\n
comment3.params=targetRoom
comment3.target=void\ bookingsFileForRoom(java.lang.String)
comment3.text=\ Core\ 4\n\ Writes\ a\ new\ file\ listing\ all\ the\ class\ bookings\ that\ are\ in\ a\ given\ room.\n\ \ The\ name\ of\ the\ new\ file\ should\ be\ the\ room,\ followed\ by\ "_Bookings.txt"\n\ \ The\ first\ line\ of\ the\ file\ should\ specify\ what\ room\ the\ bookings\ are\ for\:\n\ \ "Bookings\ for\ room\ <room\ name>"\n\ \ \n\ \ Each\ class\ booking\ should\ be\ formatted\ in\ three\ lines,\ with\ a\ blank\ line\ after.\n\ \ Course\:\ <Course\ Code>\n\ \ Time\:\ <Day>\ <Start\ Time>-<End\ Time>\n\ \ Session\:\ <Type>\n\n\ \ For\ example,\ if\ the\ targetRoom\ is\ VZ515,\ then\ the\ start\ of\ the\ file\ would\ be\ as\ follows\n\ \n\ \ Bookings\ for\ room\ VZ515\n\ \ --------------------------------------------------\n\ \ Course\:\ ACCY111\n\ \ Time\:\ Tue\ 1000-1050\n\ \ Session\:\ Tutorial\n\ \ \n\ \ Course\:\ ACCY130\n\ \ Time\:\ Thu\ 1310-1400\n\ \ Session\:\ Tutorial\n\ \ \n\ \ Course\:\ ACCY130\n\ \ Time\:\ Tue\ 1310-1400\n\ \ Session\:\ Tutorial\n\ \ \n
comment4.params=targetRoom1\ targetRoom2\ targetDay
comment4.target=void\ printRoomsOnDay(java.lang.String,\ java.lang.String,\ java.lang.String)
comment4.text=\ Completion\ 1\n\ Prints\ a\ title\ containing\ its\ arguments,\ and\ then\n\ Reads\ the\ class\ timetable\ file,\ printing\ out\ (to\ the\ UI\ window)\n\ the\ course\ code,\ class\ type,\ day,\ start\ and\ end\ time\n\ for\ each\ class\ that\ is\ in\ targetRoom1\ or\ targetRoom2\ and\ is\ on\ targetDay\n\ It\ will\ be\ best\ to\ read\ the\ six\ tokens\ on\ each\ line\ individually.\n
comment5.params=targetRoom
comment5.target=double\ meanClassLength(java.lang.String)
comment5.text=\ Completion\ 2\n\ Returns\ the\ average\ (mean)\ duration\ in\ minutes\ of\ all\ classes\ scheduled\n\ in\ a\ specified\ room.\n\ Hint\:\ be\ careful\ with\ the\ times\n\ Hint\:\ if\ there\ are\ no\ classes\ in\ the\ room,\ do\ not\ cause\ an\ error.\n
comment6.params=building\ targetDay\ targetStart\ targetEnd
comment6.target=void\ potentialDisruptions(java.lang.String,\ java.lang.String,\ int,\ int)
comment6.text=\ Challenge\ 1\n\ Lists\ all\ the\ courses\ (just\ the\ course\ code)\ that\ have\ classes\ in\ a\ given\ building\n\ on\ a\ given\ day\ such\ that\ any\ part\ of\ the\ class\ is\ between\ the\ given\ times.\n\ Each\ course\ involved\ should\ only\ be\ listed\ once,\ even\ if\ it\ has\ several\ classes\n\ in\ the\ building\ in\ the\ time\ period.\ \ Note,\ the\ data\ file\ is\ ordered\ by\ the\ course\ code.\n\ Note\ that\ this\ is\ similar,\ but\ not\ the\ same\ as,\ one\ of\ the\ completion\ questions.\n
comment7.params=targetRoom\ targetDay
comment7.target=void\ availableTimes(java.lang.String,\ java.lang.String)
comment7.text=\ Challenge\ 2\n\ Lists\ all\ available\ time\ for\ a\ giving\ room\ on\ a\ giving\ day\ from\ 900\ to\ 1700\n
comment8.params=
comment8.target=void\ commandLoop()
comment8.text=\ Repeatedly\ asks\ the\ user\ for\ a\ command\ (one\ letter)\ and\ncalls\ the\ appropriate\ method
comment9.params=
comment9.target=void\ printHelp()
comment9.text=Prints\ a\ list\ of\ the\ possible\ commands
numComments=11
