#BlueJ class context
comment0.params=
comment0.target=MiniDraw()
comment0.text=\ Constructor\ sets\ up\ the\ GUI\:\n\ \ sets\ the\ mouse\ listener\ and\ adds\ all\ the\ buttons\n\ \ For\ New,\ Open,\ Save,\ and\ Color,\ call\ the\ appropriate\ method\ (see\ below)\n\ \ \ to\ perform\ the\ action\ immediately.\n\ \ For\ other\ buttons,\ store\ the\ button\ name\ in\ the\ currentAction\ field\n
comment1.params=
comment1.target=void\ doLine()
comment10.params=x\ y
comment10.target=Shape\ findShape(double,\ double)
comment10.text=\ Checks\ each\ shape\ in\ the\ list\ to\ see\ if\ the\ point\ (x,y)\ is\ on\ the\ shape.\n\ \ It\ returns\ the\ topmost\ shape\ for\ which\ this\ is\ true.\n\ \ \ \ \ Returns\ null\ if\ there\ is\ no\ such\ shape.\n
comment11.params=
comment11.target=void\ selectColor()
comment11.text=\ Sets\ the\ current\ color.\n\ Asks\ user\ for\ a\ new\ color\ using\ a\ JColorChooser\ (see\ MiniPaint,\ Assig\ 6)\n\ As\ long\ as\ the\ color\ is\ not\ null,\ it\ remembers\ the\ color\ \n
comment12.params=
comment12.target=void\ newDrawing()
comment12.text=\ Start\ a\ new\ drawing\ -\n\ \ initialise\ the\ shapes\ ArrayList\ and\ clear\ the\ graphics\ pane.\ \n
comment13.params=x1\ y1\ x2\ y2
comment13.target=void\ addShape(double,\ double,\ double,\ double)
comment13.text=\ Construct\ a\ new\ Shape\ object\ of\ the\ appropriate\ kind\n\ \ \ \ (depending\ on\ currentAction)\ using\ the\ appropriate\ constructor\n\ \ \ \ of\ the\ Line,\ Rectangle,\ Oval,\ or\ Dot\ classes.\n\ \ \ \ Adds\ the\ shape\ to\ the\ end\ of\ the\ collection.\n
comment14.params=changeX\ changeY
comment14.target=void\ moveShape(double,\ double)
comment14.text=\ Moves\ the\ current\ shape\ (if\ there\ is\ one)\n\ \ \ \ to\ where\ the\ mouse\ was\ released.\n\ \ \ \ Ie,\ change\ its\ position\ by\ (toX-fromX)\ and\ (toY-fromY)\n
comment15.params=x\ y
comment15.target=void\ deleteShape(double,\ double)
comment15.text=\ Finds\ the\ shape\ that\ was\ under\ the\ mouseReleased\ position\ (x,\ y)\n\ \ \ \ and\ then\ removes\ it\ from\ the\ ArrayList\ of\ shapes.\ \n\ \ If\ not\ pressed\ on\ any\ shape,\ then\ do\ nothing.\n
comment16.params=changeX\ changeY
comment16.target=void\ resizeShape(double,\ double)
comment16.text=\ Resizes\ the\ current\ shape.\ A\ simple\ way\ of\ doing\ it\ is\ to\n\ \ \ \ resize\ the\ shape\ by\ the\ amount\ that\ the\ mouse\ was\ moved\n\ \ \ \ (ie\ from\ (fromX,\ fromY)\ to\ (toX,\ toY)).\ \n\ \ \ \ If\ the\ mouse\ is\ moved\ to\ the\ right,\ the\ shape\ should\n\ \ \ \ be\ made\ that\ much\ wider\ on\ each\ side;\ if\ the\ mouse\ is\ moved\ to\n\ \ \ \ the\ left,\ the\ shape\ should\ be\ made\ that\ much\ narrower\ on\ each\ side\n\ \ \ \ If\ the\ mouse\ is\ moved\ up,\ the\ shape\ should\ be\ made\n\ \ \ \ that\ much\ higher\ top\ and\ bottom;\ if\ the\ mouse\ is\ moved\ down,\ the\ shape\ \n\ \ \ \ should\ be\ made\ that\ much\ shorter\ top\ and\ bottom.\n\ \ \ \ The\ effect\ is\ that\ if\ the\ user\ drags\ from\ the\ top\ right\ corner\ of\n\ \ \ \ the\ shape,\ the\ shape\ should\ be\ resized\ to\ whereever\ the\ dragged\ to.\n
comment17.params=x\ y
comment17.target=void\ addPolygon(double,\ double)
comment17.text=\ Adds\ a\ polygon\ [challenge].\n\ \ \ \ If\ the\ currentPolygon\ is\ null,\ then\ create\ a\ new\ polygon\ with\n\ \ \ \ just\ the\ point\ x,y.\ Store\ it\ in\ currentPolygon,\ and\ add\ it\ to\ shapes.\n\ \ \ \ If\ the\ currentPolygon\ is\ not\ null,\ then\ add\ a\ new\ point\ to\ it.\n\ \ \ \ (Don't\ add\ it\ to\ shapes,\ since\ it\ is\ already\ there).\n\ \ \ \ Note,\ you\ need\ to\ reset\ currentPolygon\ to\ null\ every\ time\ a\ button\ is\ pressed\n
comment18.params=
comment18.target=void\ saveDrawing()
comment18.text=Ask\ the\ user\ to\ select\ a\ file\ and\ save\ the\ current\ drawing\ to\ the\ file.
comment19.params=
comment19.target=void\ openDrawing()
comment19.text=\n\ Ask\ the\ user\ for\ a\ file\ to\ open,\n\ then\ read\ all\ the\ shape\ descriptions\ into\ the\ current\ drawing.\n\ For\ each\ line\ of\ the\ file,\ it\ will\ read\ the\ first\ token\ to\ find\ out\ which\n\ kind\ of\ shape\ and\ read\ the\ rest\ of\ the\ line\ into\ a\ string.\n\ It\ will\ then\ call\ the\ appropriate\ constructor,\ passing\ the\ string\ as\ an\ argument.\n
comment2.params=
comment2.target=void\ moveShape()
comment20.params=args
comment20.target=void\ main(java.lang.String[])
comment3.params=
comment3.target=void\ doRectangle()
comment4.params=
comment4.target=void\ doOval()
comment5.params=
comment5.target=void\ doDot()
comment6.params=
comment6.target=void\ deleteShape()
comment7.params=
comment7.target=void\ resizeShape()
comment8.params=mouseAction\ x\ y
comment8.target=void\ doMouse(java.lang.String,\ double,\ double)
comment8.text=\ When\ mouse\ is\ pressed,\ remember\ the\ position\ in\ fields\n\ \ and\ also\ find\ the\ shape\ it\ is\ on\ (if\ any),\ and\ store\n\ \ the\ shape\ in\ a\ field\ (use\ the\ findShape(..)\ method)\n\ \ When\ the\ Mouse\ is\ released,\ depending\ on\ the\ currentAction,\n\ \ -\ perform\ the\ action\ (move,\ delete,\ or\ resize).\n\ \ \ \ move\ and\ resize\ are\ done\ on\ the\ shape\ where\ the\ mouse\ was\ pressed,\n\ \ \ \ delete\ is\ done\ on\ the\ shape\ where\ the\ mouse\ was\ released\ \n\ \ -\ construct\ the\ shape\ and\ add\ to\ the\ shapes\ ArrayList,\n\ \ \ \ (though\ the\ polygon\ is\ more\ complicated)\n\ \ -\ redraw\ the\ drawing.\n\ \ It\ is\ easiest\ to\ call\ other\ methods\ (see\ below)\ to\ actually\ do\ the\ work,\n\ \ otherwise\ this\ method\ gets\ too\ big\!\n
comment9.params=
comment9.target=void\ drawDrawing()
comment9.text=\ Draws\ all\ the\ shapes\ in\ the\ list\ on\ the\ graphics\ pane\n\ \ First\ clears\ the\ graphics\ pane,\ then\ draws\ each\ shape,\n\ \ Finally\ repaints\ the\ graphics\ pane\n
numComments=21
