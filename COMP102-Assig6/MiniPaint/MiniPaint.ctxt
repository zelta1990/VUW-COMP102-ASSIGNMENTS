#BlueJ class context
comment0.params=
comment0.target=MiniPaint()
comment0.text=Sets\ up\ the\ user\ interface\ -\ mouselistener\ and\ buttons
comment1.params=
comment1.target=void\ drawLine()
comment10.params=x\ y
comment10.target=void\ drawRect(double,\ double)
comment10.text=\ Helper\ methods\ for\ drawing\ the\ shapes,\ if\ you\ choose\ to\ define\ them\ \nI\ used\ the\ following\ methods\:
comment11.params=x\ y
comment11.target=void\ drawOval(double,\ double)
comment12.params=x\ y
comment12.target=void\ drawImage(double,\ double)
comment13.params=x\ y
comment13.target=void\ drawRings(double,\ double)
comment14.params=arguments
comment14.target=void\ main(java.lang.String[])
comment14.text=\#\ YOUR\ CODE\ HERE
comment2.params=
comment2.target=void\ drawRect()
comment3.params=
comment3.target=void\ drawOval()
comment4.params=
comment4.target=void\ drawImage()
comment5.params=
comment5.target=void\ drawRings()
comment6.params=
comment6.target=void\ doChooseColor()
comment7.params=
comment7.target=void\ doFill()
comment8.params=
comment8.target=void\ clearGraphics()
comment9.params=action\ x\ y
comment9.target=void\ doMouse(java.lang.String,\ double,\ double)
comment9.text=\n\ Respond\ to\ mouse\ events\n\ When\ pressed,\ remember\ the\ position.\n\ When\ released,\ draw\ the\ current\ shape\ using\ the\ pressed\ position\n\ \ and\ the\ released\ position.\n\ Uses\ the\ value\ in\ the\ field\ to\ determine\ which\ kind\ of\ shape\ to\ draw.\n\ Although\ you\ could\ do\ all\ the\ drawing\ in\ this\ method,\n\ \ it\ may\ be\ better\ to\ call\ some\ helper\ methods\ for\ the\ more\n\ \ complex\ actions\ (and\ then\ define\ the\ helper\ methods\!)\n
numComments=15
