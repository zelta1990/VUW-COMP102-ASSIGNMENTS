#BlueJ class context
comment0.params=
comment0.target=void\ analysePrices()
comment0.text=\n\ analysePrices\ reads\ a\ sequence\ of\ prices\ from\ the\ user\ \ and\ prints\ out\n\ \ \ the\ maximum,\ minimum,\ and\ average\ price\ over\ the\ day\n\ \ \ the\ opening\ and\ closing\ prices,\n\ \ \ the\ amount\ the\ price\ rose\ or\ fell,\n\ The\ sequence\ is\ terminated\ by\ any\ word\ (non-number)\ such\ as\ "close"\ or\ "end".\n\ All\ the\ prices\ are\ in\ cents\ (as\ positive\ integers)\ \n\ The\ method\ must\ keep\ track\ of\ the\ maximum\ and\ minimum\ prices,\ the\ count\ and\n\ sum\ of\ the\ prices,\ and\ the\ opening\ price.\n\ It\ will\ need\ variables\ for\ each\ of\ these\ quantities,\ all\ of\ which\ \n\ need\ to\ be\ initialised\ to\ an\ appropriate\ value.\n\ It\ will\ need\ a\ loop\ to\ keep\ reading\ the\ prices\ until\ there\ isn't\ an\ integer\ next.\n\ [Core]\n\ \ \ -\ There\ is\ guaranteed\ to\ be\ at\ least\ one\ price,\n\ \ \ -\ You\ only\ need\ to\ print\ the\ maximum,\ minimum,\ and\ average\ price\n\ \ \ -\ Hint,\ keep\ track\ of\ the\ sum\ of\ the\ prices\ using\ a\ variable\ of\ type\ double\n\ [Completion]\n\ \ \ -\ Print\ the\ opening\ and\ closing\ prices\ as\ well,\ along\ with\ the\ rise/fall.\n\ \ \ -\ The\ method\ should\ work\ even\ if\ there\ were\ no\ prices\ for\ the\ day\n\ [Challenge]\ The\ method\ should\ also\ compute\ and\ print\ out\n\ \ \ -\ the\ standard\ deviation\ of\ the\ prices\n\ \ \ -\ the\ average\ size\ of\ the\ change\ between\ prices\ (where\ a\ rise\ of\ 10c\ is\n\ \ \ \ \ the\ same\ size\ change\ as\ a\ fall\ of\ 10c)\n\ \ \ -\ the\ second\ highest\ and\ second\ lowest\ price\n
comment1.params=
comment1.target=void\ plotPrices()
comment1.text=\n\ Reads\ a\ sequence\ of\ prices\ (integers)\ from\ the\ user\ (using\ Scanner\n\ and\ the\ terminal\ window)\ and\ plots\ a\ bar\ graph\ of\ them,\ using\ narrow\ \n\ rectangles\ whose\ heights\ are\ equal\ to\ the\ price.\n\ The\ sequence\ is\ terminated\ by\ any\ word\ (non-number)\ such\ as\ "close"\ or\ "end".\n\ The\ method\ may\ assume\ that\ there\ are\ at\ most\ 24\ numbers.\n\ The\ method\ will\ need\ a\ loop\ to\ keep\ reading\ the\ prices\ until\ there\ isn't\ a\ number\ next.\n\ \ Each\ time\ round\ the\ loop,\ it\ needs\ to\ read\ the\ next\ price\ and\ work\ out\ where\n\ \ to\ draw\ the\ rectangle\ for\ the\ bar.\ \n\ [Core]\n\ \ \ -\ assume\ that\ all\ the\ numbers\ are\ between\ 0\ and\ 380\n\ [Completion]\n\ \ \ -\ Any\ price\ greater\ than\ 380\ should\ be\ plotted\ \n\ \ \ \ \ \ as\ if\ it\ were\ just\ 380.\n\ \ \ -\ The\ graph\ should\ also\ have\ a\ horizontal\ green\ line\ at\ the\ \n\ \ \ \ \ \ height\ of\ the\ opening\ price\ and\ a\ red\ line\ at\ the\ height\ of\ the\ closing\ price.\n\ [Challenge\:]\ \n\ \ \ -\ The\ graph\ should\ also\ have\ labels\ on\ the\ axes,\ roughly\ every\ 50\ pixels\n\ \ \ -\ Make\ the\ method\ ask\ for\ a\ maximum\ price\ first,\ then\ scale\ the\ y-axis\ and\ values\ \n\ \ \ \ \ so\ that\ the\ largest\ numbers\ just\ fit\ on\ the\ graph.\n\ \ \ -\ The\ numbers\ on\ the\ y\ axis\ should\ reflect\ the\ scaling.\n
comment2.params=
comment2.target=StockAnalyser()
comment2.text=Constructor\:\ set\ up\ user\ interface
numComments=3
